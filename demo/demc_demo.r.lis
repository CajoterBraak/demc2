
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Warning: namespace 'demc' is not available and has been replaced
by .GlobalEnv when processing object 'logPosterior'
[Previously saved workspace restored]

> #  Adaptive MCMC via demc
> rm(list=ls(all=TRUE))
> 
> library(LaplacesDemon) # or geoR for dinvchisq (and rinvchisq, rmvn)
Loading required package: parallel
> library(geoR)
Loading required package: sp
Loading required package: MASS
--------------------------------------------------------------
 Analysis of geostatistical data
 For an Introduction to geoR go to http://www.leg.ufpr.br/geoR
 geoR version 1.7-4.1 (built on 2012-06-29) is now loaded
--------------------------------------------------------------


Attaching package: 'geoR'

The following objects are masked from 'package:LaplacesDemon':

    dinvchisq, rinvchisq

> library(demc2)

Attaching package: 'demc2'

The following objects are masked from 'package:LaplacesDemon':

    invlogit, logit

> # example of Bayesian linear regresssion without intercept
> # generate some data 
> set.seed(13451)
> n= 20
> rho = -0.8
> # generate two correlated predictors
> Sigma = matrix(c(1,rho,rho,1),nrow = 2,ncol=2)
> X = rmvn(n, mu = rep(0, nrow(Sigma)), Sigma = Sigma)
> Beta = c(1,2);sigma = 0.5
> y = X%*%Beta + sigma*rnorm(n)
> Data = data.frame(y,X); names(Data)
[1] "y"  "X1" "X2"
> # parameters of priors (used with these names in the function defining the logposterior)
> v1= 10; v2= 5; # fixed values for the parametes in the prior for beta1 and beta2
> nu = 2;  tau2 = 3 # fixed values for the parameters in the prior for sigma2
> # end of set-up of Bayesian model and data for linear regression
> 
> # define a demc run to find the posterior of the parameters vector (b1,b2,sigma2)
> # step 1: write a function that gives 
> # the value of the logposterior for each value of the parmeter vector
> # here it is predefined; see what it looks like
> logposterior_sigma2
function(theta, data){
    # make data variates local 
  y = data$y; x1= data$X1 ; x2 = data$X2
  # make the parameters available
  b1 = theta[1]
  b2 = theta[2]
  sigma2 = theta[3] # sigma squared
  if (sigma2 >0) {
    # prior
    logprior = dnorm(b1, 0, sqrt(v1), log= TRUE)+dnorm(b2,0,sqrt(v2), log= TRUE)+geoR::dinvchisq(sigma2, nu, tau2, log= TRUE) 
    # likelihood 
    loglikelihood = sum(dnorm(y, mean = b1*x1+b2*x2, sd = sqrt(sigma2),log= TRUE))
    logpost = logprior + loglikelihood  
  } else logpost = -Inf # because logprior = -Inf
  logpost
}
<environment: namespace:demc2>
> # check whether the logposterior function works
> logposterior_sigma2(c(1,1,1),data = Data)
[1] -36.96542
> logposterior_sigma2(c(1,1,-1),data = Data) # -Inf as it should
[1] -Inf
> 
> # step 2: define the number of parallel chains
> d = 3 # number of parameters (=length of parameter vector)
> (Nchain = 2*d) # 
[1] 6
> #  DEMC needs an initial population Z of Nchain samples
> # step 3: generate initial population as start of each chain
> # for example, sample an initial population from the prior
> b1 = b1_init = rnorm(Nchain,0,sqrt(v1))
> b2 = b2_init = rnorm(Nchain,0,sqrt(v2))
> sigma2 = sigma2_init = rinvchisq(Nchain,nu,tau2)
> Z = rbind(b1,b2, sigma2)
>  
> N.iter = 6000
> Draws0 <- demc(Z, logposterior_sigma2, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin =0 )
> summary(Draws0)
$parameters
            mean        sd      2.5%       25%       50%       75%    97.5%
b1     0.9299003 0.4332644 0.2408796 0.7611889 0.9334676 1.1384200 1.588176
b2     1.9721228 0.4812701 1.1289506 1.7501853 1.9761839 2.2300506 2.729891
sigma2 0.7373672 0.8070769 0.3144766 0.4766408 0.5773035 0.7116716 2.714247
            Rhat n.eff
b1     0.9770985  6000
b2     1.0192264  5200
sigma2 1.4285370  1700

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3 chain 4 chain 5 chain 6
  block 1   0.275   0.324   0.276   0.304   0.262   0.346

$mean.accept
[1] 0.2978333

> summary(Draws0, keep.all = FALSE)
$parameters
            mean        sd      2.5%       25%       50%       75%    97.5%
b1     0.9341090 0.2705190 0.4180626 0.7611167 0.9258587 1.1095824 1.493291
b2     1.9848487 0.3334709 1.3678364 1.7493970 1.9654486 2.2054139 2.653762
sigma2 0.6000728 0.2213930 0.3314654 0.4701720 0.5471361 0.6787491 1.233368
           Rhat n.eff
b1     1.012487  2700
b2     1.001234  3000
sigma2 0.979123  3000

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3 chain 4 chain 5 chain 6
  block 1   0.275   0.324   0.276   0.304   0.262   0.346

$mean.accept
[1] 0.2978333

> 
> 
> # Recommendation: use parameters with unbounded support
> logsigma2 = log(sigma2_init)
> Z = rbind(b1,b2, logsigma2)
> logposterior_logsigma2
function(theta, data){ 
  theta_original = theta
  theta_original[3] =  exp(theta[3]) #    sigma2 
  logposterior_sigma2(theta_original, data = data) + theta[3]   # theta[3] = log(sigma2)
  # the second term stems from the Jacobian, slide LL122, section 2.9 of the LL book
}
<environment: namespace:demc2>
> logPosterior <- logposterior_logsigma2
> logPosterior(Z[,1],data = Data)
       b1 
-54.94846 
> #Ex DEMC.2
> N.iter = 6000
> Draws1 <- demc(Z, logPosterior, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin =0 )
> summary(Draws1)
$parameters
                mean        sd       2.5%        25%        50%       75%
b1         0.9338149 0.3901711  0.2969366  0.7863103  0.9705140  1.144006
b2         2.0028720 0.4486883  1.1666742  1.8123350  2.0425634  2.259969
logsigma2 -0.5091474 0.4154933 -1.1535825 -0.7884196 -0.5435562 -0.300159
             97.5%     Rhat n.eff
b1        1.499422 1.154387  2700
b2        2.659609 1.089024  3400
logsigma2 0.330451 1.195804  2400

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3 chain 4 chain 5 chain 6
  block 1   0.308   0.326   0.325   0.292   0.306   0.325

$mean.accept
[1] 0.3136667

> dim(Draws1$Draws)
[1]    3 6000
> #summary(Draws1, keep.all = FALSE)
> C1= as.coda(Draws1)
Loading required package: lattice
> library(coda)
> gelman.plot(C1,  max.bins = 20,confidence = 0.95, transform = FALSE, autoburnin=FALSE, auto.layout = TRUE)
> C1.2 = window(C1, start= N.iter/Nchain/2) # start = 500 from the 1000 generations
> acfplot(C1.2)
> 
> ## DEMCzs needs a large initial population
> ## start from fresh 
> ## NOT run
> # nval = 10*d ## 10* number of parameters
> # b0 = b0_init = rnorm(nval,0,sqrt(v1))
> # b1 = b1_init = rnorm(nval,0,sqrt(v2))
> # logsigma2 = logsigma2_init = log(rinvchisq(nval,nu,tau2))
> # Z = rbind(b0,b1, logsigma2)
> ## 
> ## 
> ## or use result from previous run, either explicitly
> nval = 10*d ## 10* number of parameters
> nZ = ncol(Draws1$Draws)
> Z_index = floor(seq(from =nZ/2, to = nZ, length.out = nval ))
> Z = Draws1$Draws[,Z_index]
> Nchain = 3
> Draws2.0 <- demc_zs(Nchain, Z, logPosterior, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin = 0 )
> summary(Draws2.0, keep.all = TRUE)
$parameters
                mean        sd      2.5%        25%        50%        75%
b1         0.9576777 0.2731775  0.439819  0.7775036  0.9470804  1.1425614
b2         2.0254341 0.3193484  1.389742  1.8035081  2.0212121  2.2321181
logsigma2 -0.5985409 0.3012052 -1.157131 -0.8132092 -0.6010074 -0.4049199
               97.5%     Rhat n.eff
b1        1.49920880 1.004598  5900
b2        2.65066189 1.014931  5700
logsigma2 0.02537283 1.012676  5700

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3
  block 1  0.3035  0.3205   0.311

$mean.accept
[1] 0.3116667

> dim(Draws2.0$Draws)
[1]    3 6000
> ## 
> # end NOT run 
> 
> 
> 
> # or implicitly by using the result of a previous run:
> Nchain = 3
> Draws2 <- demc_zs(Nchain, Draws1, logPosterior, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin = 0 )
> summary(Draws2, keep.all = TRUE)
$parameters
                mean        sd       2.5%        25%        50%        75%
b1         0.9427755 0.3439337  0.3558023  0.7730537  0.9540318  1.1376348
b2         2.0217329 0.3938213  1.3137203  1.8209494  2.0415782  2.2597306
logsigma2 -0.5404724 0.3765798 -1.1535439 -0.8037410 -0.5721852 -0.3273079
              97.5%     Rhat n.eff
b1        1.5165871 1.084187  9300
b2        2.6783826 1.057888  9900
logsigma2 0.1879863 1.127013  8400

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3
  block 1   0.304     0.3  0.2935

$mean.accept
[1] 0.2991667

> dim(Draws2$Draws) # 2*Niter
[1]     3 12000
> Nchain = 4
> Draws2.B <- demc_zs(Nchain, Draws2, logPosterior, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin = 0 )
Warning message:
In demc_zs(Nchain, Draws2, logPosterior, data = Data, n.generation = floor(N.iter/Nchain),  :
  demc_zs: Nchain of previous run was smaller;1 additional chain-heads sampled from second halve of previous run
> summary(Draws2.B, keep.all = TRUE)
$parameters
                mean        sd       2.5%        25%        50%        75%
b1         0.9457336 0.3216991  0.3701184  0.7738951  0.9536007  1.1331374
b2         2.0225426 0.3745216  1.3233770  1.8129847  2.0383860  2.2525966
logsigma2 -0.5540917 0.3634815 -1.1549678 -0.8120483 -0.5814978 -0.3368562
              97.5%     Rhat n.eff
b1        1.5099374 1.082757 13000
b2        2.6830606 1.051820 14000
logsigma2 0.1691377 1.109087 12000

$accept.prob
         chains
blocks    chain 1   chain 2   chain 3   chain 4
  block 1   0.292 0.2886667 0.3053333 0.3013333

$mean.accept
[1] 0.2968333

> dim(Draws2.B$Draws) # 2*Niter
[1]     3 18000
> 
> 
> # demc_zs can use a single chain
> Nchain = 1
> Draws3 <- demc_zs(Nchain, Draws2, logPosterior, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin = 0 )
> summary(Draws3, keep.all = FALSE)
$parameters
                mean        sd       2.5%        25%        50%        75%
b1         0.9454936 0.2740437  0.4023706  0.7641152  0.9420736  1.1261271
b2         2.0277764 0.3231137  1.3873309  1.8145517  2.0237790  2.2368468
logsigma2 -0.5965794 0.3275875 -1.1443224 -0.8225377 -0.6237840 -0.3928653
              97.5% Rhat n.eff
b1        1.4827599   NA    NA
b2        2.6592852   NA    NA
logsigma2 0.1217897   NA    NA

$accept.prob
         chains
blocks      chain 1
  block 1 0.2993333

$mean.accept
[1] 0.2993333

> dim(Draws3$Draws) # 3*Niter 
[1]     3 18000
> acfplot(window(as.coda(Draws3),start = ncol(Draws3$Draws)/2))
> 
> Nchain = 3
> blocks = list(); 
> # two blocks
> blocks[[1]]=  c(1,3) 
> blocks[[2]] = 2
> Draws4 <- demc_zs(Nchain, Draws1, logPosterior, blocks = blocks, data=Data, n.generation = floor(N.iter/Nchain), n.thin = 1, n.burnin = 0 )
> #monitor.DE.MC(Draws.DEMCZS3$Draws, keep.all = TRUE , m= Nchain)
> summary(Draws4, keep.all = TRUE)
$parameters
                mean        sd       2.5%        25%        50%        75%
b1         0.9647433 0.3334849  0.3698538  0.8090730  0.9836695  1.1596686
b2         2.0347274 0.3896303  1.3152716  1.8331923  2.0538248  2.2762766
logsigma2 -0.5474801 0.3718213 -1.1579810 -0.7950119 -0.5775224 -0.3470646
              97.5%     Rhat n.eff
b1        1.5094440 1.096293  9000
b2        2.6692734 1.056828 10000
logsigma2 0.1691377 1.131843  8400

$accept.prob
         chains
blocks    chain 1 chain 2 chain 3
  block 1  0.2345  0.2345  0.2460
  block 2  0.2925  0.2905  0.2935

$mean.accept
[1] 0.26525

> dim(Draws4$Draws) # Niter 
[1]     3 12000
> 
> 
> proc.time()
   user  system elapsed 
  17.89    0.39   18.54 
